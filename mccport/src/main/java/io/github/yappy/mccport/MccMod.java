/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.yappy.mccport;

import java.io.IOException;
import java.lang.reflect.Constructor;
import java.util.List;

import com.google.common.collect.ImmutableList;

import javassist.ByteArrayClassPath;
import javassist.CannotCompileException;
import javassist.ClassMap;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.NotFoundException;

public class MccMod {

    // MasaoConstruction
    private static Class<?> CLS_MC = null;
    // Masao class names
    private static final List<String> MCC_CLASSES = ImmutableList.of(
            "CharacterObject", "GameMouse", "MainProgram",
            "GameGraphics", "IdouGamen", "MapSystem",
            "GameKey", "KeyboardMenu", "MasaoConstruction");
    // Replace class name map
    private static final ClassMap MCC_CLASS_MAP = new ClassMap();

    static {
        MCC_CLASS_MAP.put("java.applet.Applet", "io.github.yappy.mccport.AppletMod");

        ClassPool cp = ClassPool.getDefault();
        try {
            for (var clsName : MCC_CLASSES) {
                addClass(clsName);
                CtClass ctc = cp.get(clsName);
                ctc.replaceClassName(MCC_CLASS_MAP);
                // ctc.debugWriteFile("dbg");
            }
            for (var clsName : MCC_CLASSES) {
                CtClass ctc = cp.get(clsName);
                var cls = ctc.toClass();
                if (clsName.equals("MasaoConstruction")) {
                    CLS_MC = cls;
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static void addClass(String name) throws IOException, NotFoundException {
        byte[] b = MccMod.class.getClassLoader().getResourceAsStream(name + ".class").readAllBytes();
        ClassPool cp = ClassPool.getDefault();
        cp.insertClassPath(new ByteArrayClassPath(name, b));
    }

    public static AppletMod constructAppletMod() {
        ClassPool cp = ClassPool.getDefault();

        try {
            Constructor<?> con = CLS_MC.getDeclaredConstructor();
            return (AppletMod) con.newInstance();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
