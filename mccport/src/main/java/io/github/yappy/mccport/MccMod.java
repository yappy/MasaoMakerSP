/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.yappy.mccport;

import java.io.IOException;
import java.lang.reflect.Constructor;
import java.util.List;

import com.google.common.collect.ImmutableList;
import com.google.common.io.Resources;

import javassist.ByteArrayClassPath;
import javassist.ClassMap;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;

public class MccMod {

    // Class<MasaoConstruction>
    private static Class<?> CLS_MC = null;
    // Masao class names
    private static final List<String> MCC_CLASSES = ImmutableList.of(
            "CharacterObject", "GameMouse", "MainProgram",
            "GameGraphics", "IdouGamen", "MapSystem",
            "GameKey", "KeyboardMenu", "MasaoConstruction");
    // Replace class name map
    private static final ClassMap MCC_CLASS_MAP = new ClassMap();

    static {
        MCC_CLASS_MAP.put("java.applet.Applet", "io.github.yappy.mccport.AppletMod");

        ClassPool cp = ClassPool.getDefault();
        try {
            for (var clsName : MCC_CLASSES) {
                // read class file binary from resources
                byte[] b = Resources.toByteArray(Resources.getResource(clsName + ".class"));
                // register to ClassPool
                cp.insertClassPath(new ByteArrayClassPath(clsName, b));

                // edit
                CtClass ctc = cp.get(clsName);
                // apply class name replacement
                ctc.replaceClassName(MCC_CLASS_MAP);
                // ctc.debugWriteFile("dbg");
            }
            {
                // raname MasaoConstruction#run() => runHooked()
                CtClass ctc = cp.get("MasaoConstruction");
                CtMethod m = ctc.getMethod("run", "()V");
                m.setName("runHooked");
            }
            for (var clsName : MCC_CLASSES) {
                CtClass ctc = cp.get(clsName);
                // load CtClass as Class
                Class<?> cls = ctc.toClass();
                // keep Class<MasaoConstruction>
                if (clsName.equals("MasaoConstruction")) {
                    CLS_MC = cls;
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static AppletMod constructAppletMod() {
        try {
            Constructor<?> con = CLS_MC.getDeclaredConstructor();
            return (AppletMod) con.newInstance();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

}
